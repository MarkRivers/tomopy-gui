#!/local/decarlo/conda/anaconda/bin/python

import sys
import logging
import pkg_resources
import tifffile
import tomoshell.widgets
import tomoshell.process
import numpy as np
from contextlib import contextmanager
from PyQt4 import QtGui, QtCore, uic


LOG = logging.getLogger('shell')


class CallableHandler(logging.Handler):
    def __init__(self, func):
        logging.Handler.__init__(self)
        self.func = func

    def emit(self, record):
        self.func(self.format(record))


@contextmanager
def spinning_cursor():
    QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))
    yield
    QtGui.QApplication.restoreOverrideCursor()


class ApplicationWindow(QtGui.QMainWindow):
    def __init__(self, app):
        QtGui.QMainWindow.__init__(self)
        ui_file = pkg_resources.resource_filename('tomoshell', 'tomoshell.ui')
        self.ui = uic.loadUi(ui_file, self)
        self.last_dir = '.'
        self.axis_calibration = None

        # set up run-time widgets
        self.overlap_viewer = tomoshell.widgets.OverlapViewer()
        self.slice_viewer = tomoshell.widgets.ImageViewer()
        self.volume_viewer = tomoshell.widgets.VolumeViewer()

        self.ui.overlap_layout.addWidget(self.overlap_viewer)
        self.ui.slice_dock.setWidget(self.slice_viewer)
        self.ui.volume_dock.setWidget(self.volume_viewer)

        # connect signals
        self.overlap_viewer.slider.valueChanged.connect(self.axis_slider_changed)

        self.ui.region_box.clicked.connect(self.region_box_clicked)
        self.ui.ffc_box.clicked.connect(self.ffc_box_clicked)

        self.ui.path_button_0.clicked.connect(self.path_0_clicked)
        self.ui.path_button_180.clicked.connect(self.path_180_clicked)
        self.ui.calibrate_button.clicked.connect(self.calibrate)

        # set up log handler
        log_handler = CallableHandler(self.output_log)
        log_handler.setLevel(logging.DEBUG)
        log_handler.setFormatter(logging.Formatter('%(name)s: %(message)s'))
        root_logger = logging.getLogger('')
        root_logger.setLevel(logging.DEBUG)
        root_logger.handlers = [log_handler]

        self.ui.show()

    def region_box_clicked(self):
        self.ui.y_step.setEnabled(self.ui.region_box.isChecked())

    def ffc_box_clicked(self):
        self.ui.preprocessing_container.setEnabled(self.ui.ffc_box.isChecked())

    def output_log(self, record):
        self.ui.text_browser.append(record)

    def get_filename(self, caption, type_filter):
        return QtGui.QFileDialog.getOpenFileName(self, caption, self.last_dir, type_filter)

    def path_0_clicked(self, checked):
        path = self.get_filename('Open TIFF', 'Images (*.tif *.tiff)')
        self.ui.path_line_0.setText(path)

    def path_180_clicked(self, checked):
        path = self.get_filename('Open TIFF', 'Images (*.tif *.tiff)')
        self.ui.path_line_180.setText(path)

    def calibrate(self):
        first_name = str(self.ui.path_line_0.text())
        second_name = str(self.ui.path_line_180.text())
        first = tifffile.TiffFile(first_name).asarray().astype(np.float)
        last = tifffile.TiffFile(second_name).asarray().astype(np.float)

        with spinning_cursor():
            self.axis_calibration = tomoshell.process.AxisCalibration(first, last)

        position = self.axis_calibration.position
        self.overlap_viewer.set_images(first, last)
        self.overlap_viewer.set_position(position)

    def axis_slider_changed(self):
        val = self.overlap_viewer.slider.value()
        self.axis_calibration.position = val
        self.ui.axis_num.setText('{} px'.format(self.axis_calibration.axis))
        self.ui.axis_spin.setValue(self.axis_calibration.axis)


def main():
    app = QtGui.QApplication(sys.argv)
    ApplicationWindow(app)
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
