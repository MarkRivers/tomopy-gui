#!/Users/decarlo/anaconda2/bin/python
#!/usr/bin/python

import sys
import logging
import pkg_resources
import tifffile
import dxchange as dx
import tomopyui.widgets
import tomopyui.process
import tomopyui.util as util

import numpy as np
from contextlib import contextmanager
from PyQt4 import QtGui, QtCore, uic


LOG = logging.getLogger('shell')


class CallableHandler(logging.Handler):
    def __init__(self, func):
        logging.Handler.__init__(self)
        self.func = func

    def emit(self, record):
        self.func(self.format(record))


@contextmanager
def spinning_cursor():
    QtGui.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))
    yield
    QtGui.QApplication.restoreOverrideCursor()


class ApplicationWindow(QtGui.QMainWindow):
    def __init__(self, app):
        QtGui.QMainWindow.__init__(self)
        ui_file = pkg_resources.resource_filename('tomopyui', 'tomopy.ui')
        self.ui = uic.loadUi(ui_file, self)
        self.last_dir = '.'
        self.axis_calibration = None

        #self.params = params
        #self.params.angle = 0

        # set up run-time widgets
        self.overlap_viewer = tomopyui.widgets.OverlapViewer()
        self.slice_viewer = tomopyui.widgets.ImageViewer()
        self.volume_viewer = tomopyui.widgets.VolumeViewer()

        self.ui.overlap_layout.addWidget(self.overlap_viewer)
        self.ui.slice_dock.setWidget(self.slice_viewer)
        self.ui.volume_dock.setWidget(self.volume_viewer)

        # connect signals
        self.overlap_viewer.slider.valueChanged.connect(self.axis_slider_changed)

        self.ui.region_box.clicked.connect(self.region_box_clicked)
        self.ui.ffc_box.clicked.connect(self.ffc_box_clicked)

        self.ui.path_button_0.clicked.connect(self.path_0_clicked)
        self.ui.path_button_180.clicked.connect(self.path_180_clicked)
        self.ui.path_button_dx.clicked.connect(self.path_dx_clicked)
        self.ui.input_path_button.clicked.connect(self.path_dx_clicked)

        self.ui.calibrate_tiff_button.clicked.connect(self.calibrate_tiff)
        self.ui.calibrate_dx_button.clicked.connect(self.calibrate_dx)
        self.ui.show_slices_button.clicked.connect(self.on_show_slices_clicked)

        #self.ui.angle_step.valueChanged.connect(self.change_angle_step)

        #self.ui.input_path_button.clicked.connect(self.input_path_button_clicked)


        # set up log handler
        log_handler = CallableHandler(self.output_log)
        log_handler.setLevel(logging.DEBUG)
        log_handler.setFormatter(logging.Formatter('%(name)s: %(message)s'))
        root_logger = logging.getLogger('')
        root_logger.setLevel(logging.DEBUG)
        root_logger.handlers = [log_handler]

        #self.ui.open_action.triggered.connect(self.on_open_from)

        self.ui.show()

    def region_box_clicked(self):
        self.ui.y_step.setEnabled(self.ui.region_box.isChecked())

    def ffc_box_clicked(self):
        self.ui.preprocessing_container.setEnabled(self.ui.ffc_box.isChecked())

    def output_log(self, record):
        self.ui.text_browser.append(record)

    def get_filename(self, caption, type_filter):
        return QtGui.QFileDialog.getOpenFileName(self, caption, self.last_dir, type_filter)

    def path_0_clicked(self, checked):
        path = self.get_filename('Open TIFF', 'Images (*.tif *.tiff)')
        self.ui.path_line_0.setText(path)

    def path_180_clicked(self, checked):
        path = self.get_filename('Open TIFF', 'Images (*.tif *.tiff)')
        self.ui.path_line_180.setText(path)

    def path_dx_clicked(self, checked):
        path = self.get_filename('Open DX file', 'Images (*.hdf *.h5)')
        self.ui.label_data_size.setText(str(util.read_dx_dims(str(path), 'data')))
        self.ui.path_line_dx.setText(path)
        self.ui.input_path_line.setText(path)

    def calibrate_tiff(self):
        first_name = str(self.ui.path_line_0.text())
        second_name = str(self.ui.path_line_180.text())
        first = tifffile.TiffFile(first_name).asarray().astype(np.float)
        last = tifffile.TiffFile(second_name).asarray().astype(np.float)

    def calibrate_dx(self):
        path = str(self.ui.path_line_dx.text())
        last_ind = util.read_dx_dims(str(path), 'theta')
        proj, flat, dark, theta = dx.read_aps_32id(path, proj=(0, 1))
        print(theta[0], theta[1])
        self.ui.angle_step.setValue((theta[1] - theta[0]).astype(np.float))
        first = proj[0,:,:].astype(np.float)
        proj, flat, dark, theta = dx.read_aps_32id(path, proj=(last_ind[0]-1, last_ind[0]))
        last = proj[0,:,:].astype(np.float)

        with spinning_cursor():
            self.axis_calibration = tomopyui.process.AxisCalibration(first, last)

        position = self.axis_calibration.position
        self.overlap_viewer.set_images(first, last)
        self.overlap_viewer.set_position(position)

    def axis_slider_changed(self):
        val = self.overlap_viewer.slider.value()
        self.axis_calibration.position = val
        self.ui.axis_num.setText('{} px'.format(self.axis_calibration.axis))
        self.ui.axis_spin.setValue(self.axis_calibration.axis)

    def on_show_slices_clicked(self):
        path = str(self.ui.path_line_dx.text())

        if not self.slice_viewer:
            self.slice_viewer = tomopyui.process.ImageViewer(path)
            self.slice_dock.setWidget(self.slice_viewer)
            self.ui.slice_dock.setVisible(True)
        else:
            self.slice_viewer.load_files(path)

    #def change_angle_step(self):
    #    if self.ui.angle_step.value() == 0:
    #        self.params.angle = None
    #    else:
    #        self.params.angle = self.ui.angle_step.value()

    #def get_values_from_params(self):
    #    self.ui.angle_step.setValue(self.params.angle if self.params.angle else 0.0)



    #def on_open_from(self):
        #config_file = QtGui.QFileDialog.getOpenFileName(self, 'Open ...', self.params.last_dir)
        #parser = ArgumentParser()
        #params = config.Params(sections=config.TOMO_PARAMS + ('gui',))
        #parser = params.add_arguments(parser)
        #self.params = parser.parse_known_args(config.config_to_list(config_name=config_file))[0]
        #self.get_values_from_params()

def main():
    app = QtGui.QApplication(sys.argv)
    ApplicationWindow(app)
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
    #main(params)
